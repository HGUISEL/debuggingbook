<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="625pt" height="1037pt"
 viewBox="0.00 0.00 624.50 1037.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1033)">
<title>%3</title>
<g id="a_graph0"><a xlink:title="PerformanceDebugger class hierarchy">
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-1033 620.5,-1033 620.5,4 -4,4"/>
</a>
</g>
<!-- PerformanceDebugger -->
<g id="node1" class="node">
<title>PerformanceDebugger</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class PerformanceDebugger:&#10;Collect and visualize a metric">
<polygon fill="none" stroke="#000000" points="0,-28 0,-70 171,-70 171,-28 0,-28"/>
<text text-anchor="start" x="8" y="-55.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">PerformanceDebugger</text>
<polyline fill="none" stroke="#000000" points="0,-47 171,-47 "/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="PerformanceDebugger">
<g id="a_node1_1"><a xlink:href="#" xlink:title="__init__(self, collector_class:Type, log:bool=False):&#10;Constructor. Use instances of `collector_class` to collect events.">
<text text-anchor="start" x="55.5" y="-35.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- MetricDebugger -->
<g id="node2" class="node">
<title>MetricDebugger</title>
<g id="a_node2"><a xlink:href="#" xlink:title="class MetricDebugger:&#10;Visualize a metric">
<polygon fill="none" stroke="#000000" points="22,-134.5 22,-231.5 149,-231.5 149,-134.5 22,-134.5"/>
<text text-anchor="start" x="30" y="-217.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">MetricDebugger</text>
<polyline fill="none" stroke="#000000" points="22,-208.5 149,-208.5 "/>
<g id="a_node2_2"><a xlink:href="#" xlink:title="MetricDebugger">
<g id="a_node2_3"><a xlink:href="#" xlink:title="color(self, location:Tuple[str, int]) &#45;&gt; str:&#10;Return a color for the given event, or None.&#10;To be overloaded in subclasses.">
<text text-anchor="start" x="37.5" y="-197.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">color()</text>
</a>
</g>
<g id="a_node2_4"><a xlink:href="#" xlink:title="maximum(self, func_name:str) &#45;&gt; float">
<text text-anchor="start" x="37.5" y="-185.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">maximum()</text>
</a>
</g>
<g id="a_node2_5"><a xlink:href="#" xlink:title="metric(self, location:Tuple[str, int]) &#45;&gt; float">
<text text-anchor="start" x="37.5" y="-174.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">metric()</text>
</a>
</g>
<g id="a_node2_6"><a xlink:href="#" xlink:title="suspiciousness(self, location:Tuple[str, int]) &#45;&gt; float:&#10;Return a suspiciousness value in the range [0, 1.0]&#10;for the given event, or `None` if unknown.&#10;To be overloaded in subclasses.">
<text text-anchor="start" x="37.5" y="-164.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">suspiciousness()</text>
</a>
</g>
<g id="a_node2_7"><a xlink:href="#" xlink:title="tooltip(self, location:Tuple[str, int]) &#45;&gt; str:&#10;Return a tooltip for the given event (default: percentage).&#10;To be overloaded in subclasses.">
<text text-anchor="start" x="37.5" y="-153.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">tooltip()</text>
</a>
</g>
<g id="a_node2_8"><a xlink:href="#" xlink:title="total(self, func_name:str) &#45;&gt; float">
<text text-anchor="start" x="37.5" y="-141.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">total()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- PerformanceDebugger&#45;&gt;MetricDebugger -->
<g id="edge1" class="edge">
<title>PerformanceDebugger&#45;&gt;MetricDebugger</title>
<path fill="none" stroke="#000000" d="M85.5,-70.2327C85.5,-84.808 85.5,-104.9186 85.5,-124.1251"/>
<polygon fill="none" stroke="#000000" points="82.0001,-124.3557 85.5,-134.3557 89.0001,-124.3557 82.0001,-124.3557"/>
</g>
<!-- SpectrumDebugger -->
<g id="node3" class="node">
<title>SpectrumDebugger</title>
<g id="a_node3"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="class SpectrumDebugger:&#10;A class to collect events for passing and failing outcomes.">
<polygon fill="none" stroke="#000000" points="10.5,-268.5 10.5,-376.5 160.5,-376.5 160.5,-268.5 10.5,-268.5"/>
<text text-anchor="start" x="18.5" y="-362.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">SpectrumDebugger</text>
<polyline fill="none" stroke="#000000" points="10.5,-353.5 160.5,-353.5 "/>
<g id="a_node3_9"><a xlink:href="#" xlink:title="SpectrumDebugger">
<g id="a_node3_10"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="__repr__(self) &#45;&gt; str:&#10;Show code as string">
<text text-anchor="start" x="37.5" y="-342" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">__repr__()</text>
</a>
</g>
<g id="a_node3_11"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="__str__(self) &#45;&gt; str:&#10;Show code as string">
<text text-anchor="start" x="37.5" y="-330" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">__str__()</text>
</a>
</g>
<g id="a_node3_12"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="_repr_html_(self) &#45;&gt; str:&#10;When output in Jupyter, visualize as HTML">
<text text-anchor="start" x="37.5" y="-319" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">_repr_html_()</text>
</a>
</g>
<g id="a_node3_13"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="code(self, functions:Union[Set[Callable], NoneType]=None, *, color:bool=False, suspiciousness:bool=False, line_numbers:bool=True) &#45;&gt; str:&#10;Return a listing of `functions` (default: covered functions).&#10;If `color` is True, render as HTML, using suspiciousness colors.&#10;If `suspiciousness` is True, include suspiciousness values.&#10;If `line_numbers` is True (default), include line numbers.">
<text text-anchor="start" x="37.5" y="-308" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">code()</text>
</a>
</g>
<g id="a_node3_14"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="percentage(self, event:Any) &#45;&gt; str:&#10;Return the suspiciousness for the given event as percentage string.">
<text text-anchor="start" x="37.5" y="-297" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">percentage()</text>
</a>
</g>
<g id="a_node3_15"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="suspiciousness(self, event:Any) &#45;&gt; Union[float, NoneType]:&#10;Return a suspiciousness value in the range [0, 1.0]&#10;for the given event, or `None` if unknown.&#10;To be overloaded in subclasses.">
<text text-anchor="start" x="37.5" y="-287" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">suspiciousness()</text>
</a>
</g>
<g id="a_node3_16"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="tooltip(self, event:Any) &#45;&gt; str:&#10;Return a tooltip for the given event (default: percentage).&#10;To be overloaded in subclasses.">
<text text-anchor="start" x="37.5" y="-276" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">tooltip()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- MetricDebugger&#45;&gt;SpectrumDebugger -->
<g id="edge2" class="edge">
<title>MetricDebugger&#45;&gt;SpectrumDebugger</title>
<path fill="none" stroke="#000000" d="M85.5,-231.7903C85.5,-240.2611 85.5,-249.1866 85.5,-257.9997"/>
<polygon fill="none" stroke="#000000" points="82.0001,-258.2598 85.5,-268.2599 89.0001,-258.2599 82.0001,-258.2598"/>
</g>
<!-- DifferenceDebugger -->
<g id="node4" class="node">
<title>DifferenceDebugger</title>
<g id="a_node4"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="class DifferenceDebugger:&#10;A class to collect events for passing and failing outcomes.">
<polygon fill="none" stroke="#000000" points="8.5,-420.5 8.5,-591.5 162.5,-591.5 162.5,-420.5 8.5,-420.5"/>
<text text-anchor="start" x="16.5" y="-577.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">DifferenceDebugger</text>
<polyline fill="none" stroke="#000000" points="8.5,-568.5 162.5,-568.5 "/>
<g id="a_node4_17"><a xlink:href="#" xlink:title="DifferenceDebugger">
<g id="a_node4_18"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="FAIL = &#39;FAIL&#39;">
<text text-anchor="start" x="73.5" y="-556.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">FAIL</text>
</a>
</g>
<g id="a_node4_19"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="PASS = &#39;PASS&#39;">
<text text-anchor="start" x="73.5" y="-545.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">PASS</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="#000000" points="8.5,-538.5 162.5,-538.5 "/>
<g id="a_node4_20"><a xlink:href="#" xlink:title="DifferenceDebugger">
<g id="a_node4_21"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="__enter__(self) &#45;&gt; Any:&#10;Enter a `with` block. Collect coverage and outcome;&#10;classify as FAIL if the block raises an exception,&#10;and PASS if it does not.">
<text text-anchor="start" x="31.5" y="-526.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">__enter__()</text>
</a>
</g>
<g id="a_node4_22"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="__exit__(self, exc_tp:Type, exc_value:BaseException, exc_traceback:traceback) &#45;&gt; Union[bool, NoneType]:&#10;Exit the `with` block.">
<text text-anchor="start" x="31.5" y="-515.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">__exit__()</text>
</a>
</g>
<g id="a_node4_23"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="all_fail_events(self) &#45;&gt; Set[Any]:&#10;Return all events observed in failing runs.">
<text text-anchor="start" x="31.5" y="-504.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">all_fail_events()</text>
</a>
</g>
<g id="a_node4_24"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="all_pass_events(self) &#45;&gt; Set[Any]:&#10;Return all events observed in passing runs.">
<text text-anchor="start" x="31.5" y="-493.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">all_pass_events()</text>
</a>
</g>
<g id="a_node4_25"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="collect_fail(self, *args:Any, **kwargs:Any) &#45;&gt; StatisticalDebugger.Collector:&#10;Return a collector for failing runs.">
<text text-anchor="start" x="31.5" y="-482.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">collect_fail()</text>
</a>
</g>
<g id="a_node4_26"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="collect_pass(self, *args:Any, **kwargs:Any) &#45;&gt; StatisticalDebugger.Collector:&#10;Return a collector for passing runs.">
<text text-anchor="start" x="31.5" y="-471.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">collect_pass()</text>
</a>
</g>
<g id="a_node4_27"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="fail_collectors(self) &#45;&gt; List[StatisticalDebugger.Collector]">
<text text-anchor="start" x="31.5" y="-460.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">fail_collectors()</text>
</a>
</g>
<g id="a_node4_28"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="only_fail_events(self) &#45;&gt; Set[Any]:&#10;Return all events observed only in failing runs.">
<text text-anchor="start" x="31.5" y="-449.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">only_fail_events()</text>
</a>
</g>
<g id="a_node4_29"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="only_pass_events(self) &#45;&gt; Set[Any]:&#10;Return all events observed only in passing runs.">
<text text-anchor="start" x="31.5" y="-438.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">only_pass_events()</text>
</a>
</g>
<g id="a_node4_30"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="pass_collectors(self) &#45;&gt; List[StatisticalDebugger.Collector]">
<text text-anchor="start" x="31.5" y="-427.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">pass_collectors()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- SpectrumDebugger&#45;&gt;DifferenceDebugger -->
<g id="edge3" class="edge">
<title>SpectrumDebugger&#45;&gt;DifferenceDebugger</title>
<path fill="none" stroke="#000000" d="M85.5,-376.5636C85.5,-387.1932 85.5,-398.6398 85.5,-410.1724"/>
<polygon fill="none" stroke="#000000" points="82.0001,-410.3108 85.5,-420.3108 89.0001,-410.3109 82.0001,-410.3108"/>
</g>
<!-- StatisticalDebugger -->
<g id="node5" class="node">
<title>StatisticalDebugger</title>
<g id="a_node5"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="class StatisticalDebugger:&#10;A class to collect events for multiple outcomes.">
<polygon fill="none" stroke="#000000" points="10,-635.5 10,-820.5 161,-820.5 161,-635.5 10,-635.5"/>
<text text-anchor="start" x="18" y="-806.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">StatisticalDebugger</text>
<polyline fill="none" stroke="#000000" points="10,-797.5 161,-797.5 "/>
<g id="a_node5_31"><a xlink:href="#" xlink:title="StatisticalDebugger">
<g id="a_node5_32"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="__init__(self, collector_class:Type=&lt;class &#39;StatisticalDebugger.CoverageCollector&#39;&gt;, log:bool=False):&#10;Constructor. Use instances of `collector_class` to collect events.">
<text text-anchor="start" x="28.5" y="-786.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node5_33"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="__repr__(self) &#45;&gt; str:&#10;Return repr(self).">
<text text-anchor="start" x="28.5" y="-775.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">__repr__()</text>
</a>
</g>
<g id="a_node5_34"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="_repr_markdown_(self) &#45;&gt; str">
<text text-anchor="start" x="28.5" y="-763.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">_repr_markdown_()</text>
</a>
</g>
<g id="a_node5_35"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="add_collector(self, outcome:str, collector:StatisticalDebugger.Collector) &#45;&gt; StatisticalDebugger.Collector">
<text text-anchor="start" x="28.5" y="-752.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">add_collector()</text>
</a>
</g>
<g id="a_node5_36"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="all_events(self, outcome:Union[str, NoneType]=None) &#45;&gt; Set[Any]:&#10;Return a set of all events observed.">
<text text-anchor="start" x="28.5" y="-741.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">all_events()</text>
</a>
</g>
<g id="a_node5_37"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="collect(self, outcome:str, *args:Any, **kwargs:Any) &#45;&gt; StatisticalDebugger.Collector:&#10;Return a collector for the given outcome.&#10;Additional args are passed to the collector.">
<text text-anchor="start" x="28.5" y="-730.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">collect()</text>
</a>
</g>
<g id="a_node5_38"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="color(self, event:Any) &#45;&gt; Union[str, NoneType]:&#10;Return a color for the given event, or None.&#10;To be overloaded in subclasses.">
<text text-anchor="start" x="28.5" y="-720.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">color()</text>
</a>
</g>
<g id="a_node5_39"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="coverage(self) &#45;&gt; Set[Tuple[Callable, int]]:&#10;Return a set of all (functions, line_numbers) observed">
<text text-anchor="start" x="28.5" y="-708.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">coverage()</text>
</a>
</g>
<g id="a_node5_40"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="covered_functions(self) &#45;&gt; Set[Callable]:&#10;Return a set of all functions observed.">
<text text-anchor="start" x="28.5" y="-697.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">covered_functions()</text>
</a>
</g>
<g id="a_node5_41"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="event_str(self, event:Any) &#45;&gt; str:&#10;Format the given event. To be overloaded in subclasses.">
<text text-anchor="start" x="28.5" y="-687.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">event_str()</text>
</a>
</g>
<g id="a_node5_42"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="event_table(self, **_args:Any) &#45;&gt; Any:&#10;Print out event table in Markdown format.">
<text text-anchor="start" x="28.5" y="-675.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">event_table()</text>
</a>
</g>
<g id="a_node5_43"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="event_table_text(self, *, args:bool=False, color:bool=False) &#45;&gt; str:&#10;Print out a table of events observed.&#10;If `args` is True, use arguments as headers.&#10;If `color` is True, use colors.">
<text text-anchor="start" x="28.5" y="-664.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">event_table_text()</text>
</a>
</g>
<g id="a_node5_44"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="function(self) &#45;&gt; Union[Callable, NoneType]:&#10;Return the entry function from the events observed,&#10;or None if ambiguous.">
<text text-anchor="start" x="28.5" y="-653.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">function()</text>
</a>
</g>
<g id="a_node5_45"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="tooltip(self, event:Any) &#45;&gt; Union[str, NoneType]:&#10;Return a tooltip string for the given event, or None.&#10;To be overloaded in subclasses.">
<text text-anchor="start" x="28.5" y="-643.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">tooltip()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- DifferenceDebugger&#45;&gt;StatisticalDebugger -->
<g id="edge4" class="edge">
<title>DifferenceDebugger&#45;&gt;StatisticalDebugger</title>
<path fill="none" stroke="#000000" d="M85.5,-591.5134C85.5,-602.455 85.5,-613.7458 85.5,-624.9287"/>
<polygon fill="none" stroke="#000000" points="82.0001,-625.1552 85.5,-635.1553 89.0001,-625.1553 82.0001,-625.1552"/>
</g>
<!-- TimeCollector -->
<g id="node6" class="node">
<title>TimeCollector</title>
<g id="a_node6"><a xlink:href="#" xlink:title="class TimeCollector:&#10;Collect time executed for each line">
<polygon fill="none" stroke="#000000" points="251,-.5 251,-97.5 364,-97.5 364,-.5 251,-.5"/>
<text text-anchor="start" x="259" y="-83.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">TimeCollector</text>
<polyline fill="none" stroke="#000000" points="251,-74.5 364,-74.5 "/>
<g id="a_node6_46"><a xlink:href="#" xlink:title="TimeCollector">
<g id="a_node6_47"><a xlink:href="#" xlink:title="__enter__(self) &#45;&gt; Any:&#10;Called at begin of `with` block. Turn tracing on.">
<text text-anchor="start" x="268.5" y="-63.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">__enter__()</text>
</a>
</g>
<g id="a_node6_48"><a xlink:href="#" xlink:title="__init__(self) &#45;&gt; None:&#10;Constructor">
<text text-anchor="start" x="268.5" y="-52.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node6_49"><a xlink:href="#" xlink:title="all_metrics(self, func:str) &#45;&gt; List[float]:&#10;Return all metric for a function `func`.">
<text text-anchor="start" x="268.5" y="-41.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">all_metrics()</text>
</a>
</g>
<g id="a_node6_50"><a xlink:href="#" xlink:title="collect(self, frame:frame, event:str, arg:Any) &#45;&gt; None:&#10;Invoked for every line executed. Accumulate time spent.">
<text text-anchor="start" x="268.5" y="-30.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">collect()</text>
</a>
</g>
<g id="a_node6_51"><a xlink:href="#" xlink:title="metric(self, location:Any) &#45;&gt; Union[float, NoneType]:&#10;Return a metric for an event, or none.">
<text text-anchor="start" x="268.5" y="-19.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">metric()</text>
</a>
</g>
<g id="a_node6_52"><a xlink:href="#" xlink:title="reset_timer(self) &#45;&gt; None">
<text text-anchor="start" x="268.5" y="-7.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">reset_timer()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- MetricCollector -->
<g id="node7" class="node">
<title>MetricCollector</title>
<g id="a_node7"><a xlink:href="#" xlink:title="class MetricCollector:&#10;Abstract superclass for collecting line&#45;specific metrics">
<polygon fill="none" stroke="#000000" points="251.5,-145.5 251.5,-220.5 373.5,-220.5 373.5,-145.5 251.5,-145.5"/>
<text text-anchor="start" x="259.5" y="-206.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">MetricCollector</text>
<polyline fill="none" stroke="#000000" points="251.5,-197.5 373.5,-197.5 "/>
<g id="a_node7_53"><a xlink:href="#" xlink:title="MetricCollector">
<g id="a_node7_54"><a xlink:href="#" xlink:title="all_metrics(self, func:str) &#45;&gt; List[float]:&#10;Return all metric for a function `func`.">
<text text-anchor="start" x="273.5" y="-186.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">all_metrics()</text>
</a>
</g>
<g id="a_node7_55"><a xlink:href="#" xlink:title="maximum(self, func:str) &#45;&gt; float">
<text text-anchor="start" x="273.5" y="-174.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">maximum()</text>
</a>
</g>
<g id="a_node7_56"><a xlink:href="#" xlink:title="metric(self, event:Any) &#45;&gt; Union[float, NoneType]:&#10;Return a metric for an event, or none.">
<text text-anchor="start" x="273.5" y="-164.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">metric()</text>
</a>
</g>
<g id="a_node7_57"><a xlink:href="#" xlink:title="total(self, func:str) &#45;&gt; float">
<text text-anchor="start" x="273.5" y="-152.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">total()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- TimeCollector&#45;&gt;MetricCollector -->
<g id="edge5" class="edge">
<title>TimeCollector&#45;&gt;MetricCollector</title>
<path fill="none" stroke="#000000" d="M309.3193,-97.7561C309.7774,-110.0332 310.2685,-123.195 310.7244,-135.4139"/>
<polygon fill="none" stroke="#000000" points="307.2271,-135.5534 311.0976,-145.4159 314.2222,-135.2923 307.2271,-135.5534"/>
</g>
<!-- CoverageCollector -->
<g id="node8" class="node">
<title>CoverageCollector</title>
<g id="a_node8"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="class CoverageCollector:&#10;A class to record covered locations during execution.">
<polygon fill="none" stroke="#000000" points="240.5,-279.5 240.5,-365.5 384.5,-365.5 384.5,-279.5 240.5,-279.5"/>
<text text-anchor="start" x="248.5" y="-351.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">CoverageCollector</text>
<polyline fill="none" stroke="#000000" points="240.5,-342.5 384.5,-342.5 "/>
<g id="a_node8_58"><a xlink:href="#" xlink:title="CoverageCollector">
<g id="a_node8_59"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="__init__(self) &#45;&gt; None:&#10;Constructor.">
<text text-anchor="start" x="255.5" y="-331" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node8_60"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="collect(self, frame:frame, event:str, arg:Any) &#45;&gt; None:&#10;Save coverage for an observed event.">
<text text-anchor="start" x="255.5" y="-320" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">collect()</text>
</a>
</g>
<g id="a_node8_61"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="coverage(self) &#45;&gt; Set[Tuple[Callable, int]]:&#10;Return a set (function, lineno) with all locations covered.">
<text text-anchor="start" x="255.5" y="-309" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">coverage()</text>
</a>
</g>
<g id="a_node8_62"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="covered_functions(self) &#45;&gt; Set[Callable]:&#10;Return a set with all functions covered.">
<text text-anchor="start" x="255.5" y="-298" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">covered_functions()</text>
</a>
</g>
<g id="a_node8_63"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="events(self) &#45;&gt; Set[Tuple[str, int]]:&#10;Return the set of locations covered.&#10;Each location comes as a pair (`function_name`, `lineno`).">
<text text-anchor="start" x="255.5" y="-287" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">events()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- MetricCollector&#45;&gt;CoverageCollector -->
<g id="edge6" class="edge">
<title>MetricCollector&#45;&gt;CoverageCollector</title>
<path fill="none" stroke="#000000" d="M312.5,-220.7507C312.5,-235.5776 312.5,-252.8674 312.5,-268.9426"/>
<polygon fill="none" stroke="#000000" points="309.0001,-269.2928 312.5,-279.2929 316.0001,-269.2929 309.0001,-269.2928"/>
</g>
<!-- Collector -->
<g id="node9" class="node">
<title>Collector</title>
<g id="a_node9"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="class Collector:&#10;A class to record events during execution.">
<polygon fill="none" stroke="#000000" points="188,-413.5 188,-598.5 331,-598.5 331,-413.5 188,-413.5"/>
<text text-anchor="start" x="228" y="-584.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">Collector</text>
<polyline fill="none" stroke="#000000" points="188,-575.5 331,-575.5 "/>
<g id="a_node9_64"><a xlink:href="#" xlink:title="Collector">
<g id="a_node9_65"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="__exit__(self, exc_tp:Type, exc_value:BaseException, exc_traceback:traceback) &#45;&gt; Union[bool, NoneType]:&#10;Exit the `with` block.">
<text text-anchor="start" x="196.5" y="-564.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">__exit__()</text>
</a>
</g>
<g id="a_node9_66"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="__init__(self) &#45;&gt; None:&#10;Constructor.">
<text text-anchor="start" x="196.5" y="-553.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node9_67"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="__repr__(self) &#45;&gt; str:&#10;Return a string representation of the collector">
<text text-anchor="start" x="196.5" y="-541.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">__repr__()</text>
</a>
</g>
<g id="a_node9_68"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="add_items_to_ignore(self, items_to_ignore:List[Union[Type, Callable]]) &#45;&gt; None:&#10;Define additional classes and functions to ignore during collection&#10;(typically `Debugger` classes using these collectors).">
<text text-anchor="start" x="196.5" y="-530.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">add_items_to_ignore()</text>
</a>
</g>
<g id="a_node9_69"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="args(self) &#45;&gt; Dict[str, Any]:&#10;Return a dict of argument names and values from the first call">
<text text-anchor="start" x="196.5" y="-519.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">args()</text>
</a>
</g>
<g id="a_node9_70"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="argstring(self) &#45;&gt; str:&#10;Return the list of arguments from the first call,&#10;as a printable string">
<text text-anchor="start" x="196.5" y="-508.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">argstring()</text>
</a>
</g>
<g id="a_node9_71"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="collect(self, frame:frame, event:str, arg:Any) &#45;&gt; None:&#10;Collector function. To be overloaded in subclasses.">
<text text-anchor="start" x="196.5" y="-498.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">collect()</text>
</a>
</g>
<g id="a_node9_72"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="coverage(self) &#45;&gt; Set[Tuple[Callable, int]]:&#10;Return a set (function, lineno) with locations covered.&#10;To be overloaded in subclasses.">
<text text-anchor="start" x="196.5" y="-487.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">coverage()</text>
</a>
</g>
<g id="a_node9_73"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="covered_functions(self) &#45;&gt; Set[Callable]:&#10;Set of covered functions. To be overloaded in subclasses.">
<text text-anchor="start" x="196.5" y="-476.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">covered_functions()</text>
</a>
</g>
<g id="a_node9_74"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="events(self) &#45;&gt; Set:&#10;Return a collection of events. To be overridden in subclasses.">
<text text-anchor="start" x="196.5" y="-465.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">events()</text>
</a>
</g>
<g id="a_node9_75"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="exception(self) &#45;&gt; Union[Type, NoneType]:&#10;Return the exception class from the first call,&#10;or None if no exception was raised.">
<text text-anchor="start" x="196.5" y="-453.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">exception()</text>
</a>
</g>
<g id="a_node9_76"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="function(self) &#45;&gt; Callable:&#10;Return the function from the first call, as a function object">
<text text-anchor="start" x="196.5" y="-442.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">function()</text>
</a>
</g>
<g id="a_node9_77"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="id(self) &#45;&gt; str:&#10;Return an identifier for the collector,&#10;created from the first call">
<text text-anchor="start" x="196.5" y="-431.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">id()</text>
</a>
</g>
<g id="a_node9_78"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="traceit(self, frame:frame, event:str, arg:Any) &#45;&gt; None:&#10;Tracing function.&#10;Saves the first function and calls collect().">
<text text-anchor="start" x="196.5" y="-421.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">traceit()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- CoverageCollector&#45;&gt;Collector -->
<g id="edge7" class="edge">
<title>CoverageCollector&#45;&gt;Collector</title>
<path fill="none" stroke="#000000" d="M300.0739,-365.5226C296.7255,-377.1155 292.9548,-390.1706 289.0954,-403.533"/>
<polygon fill="none" stroke="#000000" points="285.6865,-402.7223 286.2742,-413.3008 292.4116,-404.6647 285.6865,-402.7223"/>
</g>
<!-- StackInspector -->
<g id="node11" class="node">
<title>StackInspector</title>
<g id="a_node11"><a xlink:href="StackInspector.ipynb" xlink:title="class StackInspector:&#10;Provide functions to inspect the stack">
<polygon fill="none" stroke="#000000" points="226,-857.5 226,-1028.5 393,-1028.5 393,-857.5 226,-857.5"/>
<text text-anchor="start" x="258.5" y="-1014.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">StackInspector</text>
<polyline fill="none" stroke="#000000" points="226,-1005.5 393,-1005.5 "/>
<g id="a_node11_79"><a xlink:href="#" xlink:title="StackInspector">
<g id="a_node11_80"><a xlink:href="StackInspector.ipynb" xlink:title="_generated_function_cache = {(&#39;remove_html_markup&#39;, 238): &lt;function remove_html_markup at 0x7fe76c1e00d0&gt;}">
<text text-anchor="start" x="234.5" y="-993" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">_generated_function_cache</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="#000000" points="226,-986.5 393,-986.5 "/>
<g id="a_node11_81"><a xlink:href="#" xlink:title="StackInspector">
<g id="a_node11_82"><a xlink:href="StackInspector.ipynb" xlink:title="caller_frame(self) &#45;&gt; frame:&#10;Return the frame of the caller.">
<text text-anchor="start" x="252.5" y="-974" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_frame()</text>
</a>
</g>
<g id="a_node11_83"><a xlink:href="StackInspector.ipynb" xlink:title="caller_function(self) &#45;&gt; Callable:&#10;Return the calling function">
<text text-anchor="start" x="252.5" y="-963" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_function()</text>
</a>
</g>
<g id="a_node11_84"><a xlink:href="StackInspector.ipynb" xlink:title="caller_globals(self) &#45;&gt; Dict[str, Any]:&#10;Return the globals() environment of the caller.">
<text text-anchor="start" x="252.5" y="-952" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_globals()</text>
</a>
</g>
<g id="a_node11_85"><a xlink:href="StackInspector.ipynb" xlink:title="caller_locals(self) &#45;&gt; Dict[str, Any]:&#10;Return the locals() environment of the caller.">
<text text-anchor="start" x="252.5" y="-941" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_locals()</text>
</a>
</g>
<g id="a_node11_86"><a xlink:href="StackInspector.ipynb" xlink:title="caller_location(self) &#45;&gt; Tuple[Callable, int]:&#10;Return the location (func, lineno) of the caller.">
<text text-anchor="start" x="252.5" y="-930" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_location()</text>
</a>
</g>
<g id="a_node11_87"><a xlink:href="StackInspector.ipynb" xlink:title="create_function(self, frame:frame) &#45;&gt; Callable:&#10;Create function for given frame">
<text text-anchor="start" x="252.5" y="-919" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">create_function()</text>
</a>
</g>
<g id="a_node11_88"><a xlink:href="StackInspector.ipynb" xlink:title="is_internal_error(self, exc_tp:Type, exc_value:BaseException, exc_traceback:traceback) &#45;&gt; bool:&#10;Return True if exception was raised from `StackInspector` or a subclass.">
<text text-anchor="start" x="252.5" y="-908" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">is_internal_error()</text>
</a>
</g>
<g id="a_node11_89"><a xlink:href="StackInspector.ipynb" xlink:title="our_frame(self, frame:frame) &#45;&gt; bool:&#10;Return true if `frame` is in the current (inspecting) class.">
<text text-anchor="start" x="252.5" y="-897" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">our_frame()</text>
</a>
</g>
<g id="a_node11_90"><a xlink:href="StackInspector.ipynb" xlink:title="search_frame(self, name:str, frame:Union[frame, NoneType]=None) &#45;&gt; Tuple[Union[frame, NoneType], Union[Callable, NoneType]]:&#10;Return a pair (`frame`, `item`)&#10;in which the function `name` is defined as `item`.">
<text text-anchor="start" x="252.5" y="-886" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">search_frame()</text>
</a>
</g>
<g id="a_node11_91"><a xlink:href="StackInspector.ipynb" xlink:title="search_func(self, name:str, frame:Union[frame, NoneType]=None) &#45;&gt; Union[Callable, NoneType]:&#10;Search in callers for a definition of the function `name`">
<text text-anchor="start" x="252.5" y="-875" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">search_func()</text>
</a>
</g>
<g id="a_node11_92"><a xlink:href="StackInspector.ipynb" xlink:title="unknown(self) &#45;&gt; None">
<text text-anchor="start" x="252.5" y="-864" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">unknown()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- CoverageCollector&#45;&gt;StackInspector -->
<g id="edge10" class="edge">
<title>CoverageCollector&#45;&gt;StackInspector</title>
<path fill="none" stroke="#000000" d="M328.0265,-365.673C332.6376,-380.4778 337.0962,-397.2785 339.5,-413 366.9079,-592.255 366.3825,-641.2413 342.5,-821 341.3557,-829.6127 339.7759,-838.4799 337.9226,-847.3169"/>
<polygon fill="none" stroke="#000000" points="334.4644,-846.7461 335.7227,-857.266 341.2993,-848.2575 334.4644,-846.7461"/>
</g>
<!-- Tracer -->
<g id="node10" class="node">
<title>Tracer</title>
<g id="a_node10"><a xlink:href="Tracer.ipynb" xlink:title="class Tracer:&#10;A class for tracing a piece of code. Use as `with Tracer(): block()`">
<polygon fill="none" stroke="#000000" points="179,-668.5 179,-787.5 334,-787.5 334,-668.5 179,-668.5"/>
<text text-anchor="start" x="234.5" y="-773.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">Tracer</text>
<polyline fill="none" stroke="#000000" points="179,-764.5 334,-764.5 "/>
<g id="a_node10_93"><a xlink:href="#" xlink:title="Tracer">
<g id="a_node10_94"><a xlink:href="Tracer.ipynb" xlink:title="__enter__(self) &#45;&gt; Any:&#10;Called at begin of `with` block. Turn tracing on.">
<text text-anchor="start" x="187.5" y="-753.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">__enter__()</text>
</a>
</g>
<g id="a_node10_95"><a xlink:href="Tracer.ipynb" xlink:title="__exit__(self, exc_tp:Type, exc_value:BaseException, exc_traceback:traceback) &#45;&gt; Union[bool, NoneType]:&#10;Called at end of `with` block. Turn tracing off.&#10;Return `None` if ok, not `None` if internal error.">
<text text-anchor="start" x="187.5" y="-742.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">__exit__()</text>
</a>
</g>
<g id="a_node10_96"><a xlink:href="Tracer.ipynb" xlink:title="__init__(self, file:TextIO=&lt;ipykernel.iostream.OutStream object at 0x7fe76903c390&gt;) &#45;&gt; None:&#10;Create a new tracer.&#10;If `file` is given, output to `file` instead of stdout.">
<text text-anchor="start" x="187.5" y="-731.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node10_97"><a xlink:href="Tracer.ipynb" xlink:title="_traceit(self, frame:frame, event:str, arg:Any) &#45;&gt; Union[Callable, NoneType]:&#10;Internal tracing function.">
<text text-anchor="start" x="187.5" y="-719.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">_traceit()</text>
</a>
</g>
<g id="a_node10_98"><a xlink:href="Tracer.ipynb" xlink:title="changed_vars(self, new_vars:Dict[str, Any]) &#45;&gt; Dict[str, Any]:&#10;Track changed variables, based on `new_vars` observed.">
<text text-anchor="start" x="187.5" y="-708.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">changed_vars()</text>
</a>
</g>
<g id="a_node10_99"><a xlink:href="Tracer.ipynb" xlink:title="log(self, *objects:Any, sep:str=&#39; &#39;, end:str=&#39;\n&#39;, flush:bool=True) &#45;&gt; None:&#10;Like `print()`, but always sending to `file` given at initialization,&#10;and flushing by default.">
<text text-anchor="start" x="187.5" y="-697.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">log()</text>
</a>
</g>
<g id="a_node10_100"><a xlink:href="Tracer.ipynb" xlink:title="print_debugger_status(self, frame:frame, event:str, arg:Any) &#45;&gt; None:&#10;Show current source line and changed vars">
<text text-anchor="start" x="187.5" y="-686.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">print_debugger_status()</text>
</a>
</g>
<g id="a_node10_101"><a xlink:href="Tracer.ipynb" xlink:title="traceit(self, frame:frame, event:str, arg:Any) &#45;&gt; None:&#10;Tracing function; called at every line. To be overloaded in subclasses.">
<text text-anchor="start" x="187.5" y="-676.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">traceit()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Collector&#45;&gt;Tracer -->
<g id="edge8" class="edge">
<title>Collector&#45;&gt;Tracer</title>
<path fill="none" stroke="#000000" d="M258.2495,-598.5404C257.9796,-618.5084 257.6987,-639.2964 257.443,-658.2211"/>
<polygon fill="none" stroke="#000000" points="253.9433,-658.1822 257.3077,-668.2286 260.9426,-658.2768 253.9433,-658.1822"/>
</g>
<!-- Tracer&#45;&gt;StackInspector -->
<g id="edge9" class="edge">
<title>Tracer&#45;&gt;StackInspector</title>
<path fill="none" stroke="#000000" d="M271.1931,-787.604C275.7476,-806.08 280.8871,-826.9287 285.8877,-847.2142"/>
<polygon fill="none" stroke="#000000" points="282.5364,-848.2429 288.3282,-857.1145 289.333,-846.5674 282.5364,-848.2429"/>
</g>
<!-- HitCollector -->
<g id="node12" class="node">
<title>HitCollector</title>
<g id="a_node12"><a xlink:href="#" xlink:title="class HitCollector:&#10;Collect how often a line is executed">
<polygon fill="none" stroke="#000000" points="382.5,-11.5 382.5,-86.5 480.5,-86.5 480.5,-11.5 382.5,-11.5"/>
<text text-anchor="start" x="390.5" y="-72.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">HitCollector</text>
<polyline fill="none" stroke="#000000" points="382.5,-63.5 480.5,-63.5 "/>
<g id="a_node12_102"><a xlink:href="#" xlink:title="HitCollector">
<g id="a_node12_103"><a xlink:href="#" xlink:title="__init__(self) &#45;&gt; None:&#10;Constructor.">
<text text-anchor="start" x="392.5" y="-52.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node12_104"><a xlink:href="#" xlink:title="all_metrics(self, func:str) &#45;&gt; List[float]:&#10;Return all metric for a function `func`.">
<text text-anchor="start" x="392.5" y="-41.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">all_metrics()</text>
</a>
</g>
<g id="a_node12_105"><a xlink:href="#" xlink:title="collect(self, frame:frame, event:str, arg:Any) &#45;&gt; None:&#10;Save coverage for an observed event.">
<text text-anchor="start" x="392.5" y="-30.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">collect()</text>
</a>
</g>
<g id="a_node12_106"><a xlink:href="#" xlink:title="metric(self, location:Tuple[str, int]) &#45;&gt; Union[int, NoneType]:&#10;Return a metric for an event, or none.">
<text text-anchor="start" x="392.5" y="-19.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">metric()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- HitCollector&#45;&gt;MetricCollector -->
<g id="edge11" class="edge">
<title>HitCollector&#45;&gt;MetricCollector</title>
<path fill="none" stroke="#000000" d="M398.0352,-86.6831C384.0929,-102.3828 367.7749,-120.7576 353.151,-137.2249"/>
<polygon fill="none" stroke="#000000" points="350.1491,-135.3342 346.1259,-145.1355 355.3832,-139.9824 350.1491,-135.3342"/>
</g>
<!-- Legend -->
<g id="node13" class="node">
<title>Legend</title>
<text text-anchor="start" x="498.5" y="-66.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="10.00" fill="#6a0dad">Legend</text>
<text text-anchor="start" x="498.5" y="-56.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="505.5" y="-56.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00" fill="#000000">public_method()</text>
<text text-anchor="start" x="498.5" y="-46.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="505.5" y="-46.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00" fill="#000000">private_method()</text>
<text text-anchor="start" x="498.5" y="-36.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="505.5" y="-36.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00" fill="#000000">overloaded_method()</text>
<text text-anchor="start" x="498.5" y="-27.3" font-family="Helvetica,sans-Serif" font-size="9.00" fill="#000000">Hover over names to see doc</text>
</g>
</g>
</svg>
